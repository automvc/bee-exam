[WARN] Auto table: parameter  ${month} in Orders${month} still has not value, will be ignore it!
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE Orders
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE Orders (
id  number(19) PRIMARY KEY,  
userid  varchar2(100),  
name  varchar2(100),  
total  number(19),  
createtime  varchar2(100),  
remark  varchar2(100),  
sequence  varchar2(100),  
abc  varchar2(100),  
updatetime  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE Orders_202007
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE Orders_202007 (
id  number(19) PRIMARY KEY,  
userid  varchar2(100),  
name  varchar2(100),  
total  number(19),  
createtime  varchar2(100),  
remark  varchar2(100),  
sequence  varchar2(100),  
abc  varchar2(100),  
updatetime  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE test_user
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE test_user (
id  number(19) PRIMARY KEY,  
email  varchar2(100),  
last_name  varchar2(100),  
name  varchar2(100),  
password  varchar2(100),  
username  varchar2(100),  
createtime  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[WARN] Auto table: parameter  ${version} in LeafAlloc${version} still has not value, will be ignore it!
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE leaf_alloc
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE leaf_alloc (
id  number(19) PRIMARY KEY,  
biz_tag  varchar2(100),  
max_id  number(19),  
step  number(10),  
description  varchar2(100),  
update_time  varchar2(100),  
version  number(10)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE leaf_alloc2
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE leaf_alloc2 (
id  number(19) PRIMARY KEY,  
biz_tag  varchar2(100),  
max_id  number(19),  
step  number(10),  
description  varchar2(100),  
update_time  varchar2(100),  
version  number(10)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE scores
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE scores (
id  number(19) PRIMARY KEY,  
classno  varchar2(100),  
term  varchar2(100),  
examno  varchar2(100),  
subjectno  varchar2(100),  
subject  varchar2(100),  
stuno  varchar2(100),  
name  varchar2(100),  
teacherno  varchar2(100),  
teachername  varchar2(100),  
score  number(19,6),  
creater  varchar2(100),  
createtime  varchar2(100),  
updater  varchar2(100),  
updatetime  varchar2(100),  
remark  varchar2(100),  
ext1  varchar2(100),  
status  varchar2(100),  
schoolno  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE assignexam
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE assignexam (
id  number(19) PRIMARY KEY,  
classno  varchar2(100),  
term  varchar2(100),  
examno  varchar2(100),  
subjectno  varchar2(100),  
subject  varchar2(100),  
creater  varchar2(100),  
createtime  varchar2(100),  
updater  varchar2(100),  
updatetime  varchar2(100),  
remark  varchar2(100),  
ext1  varchar2(100),  
status  varchar2(100),  
schoolno  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: DROP TABLE assigncourse
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: CREATE TABLE assigncourse (
id  number(19) PRIMARY KEY,  
classno  varchar2(100),  
term  varchar2(100),  
teacherno  varchar2(100),  
name  varchar2(100),  
subjectno  varchar2(100),  
subject  varchar2(100),  
creater  varchar2(100),  
createtime  varchar2(100),  
updater  varchar2(100),  
updatetime  varchar2(100),  
remark  varchar2(100),  
status  varchar2(100),  
schoolno  varchar2(100)
 )
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders VALUES ('100001', 'Bee', 'Bee(ORM Framework)', '95.01', '2020-03-02 11:29:28', 'test', '12345601', 'test1', null);
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders VALUES ('100002', 'bee', 'Bee', '96.01', '2020-03-02 11:29:28', 'test%a', '12345602', 'test2', '2020-03-02 16:34:19');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders VALUES ('100003', 'bee', 'Bee', '97.01', '2020-03-02 11:29:28', 'testx%', '12345603', 'test3', '2020-03-02 16:34:19');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders_202007 VALUES ('100001', 'Bee', 'Bee(ORM Framework)', '95.01', '2020-03-02 11:29:28', 'test', '12345601', 'test1', null);
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders_202007 VALUES ('100002', 'bee', 'Bee', '96.01', '2020-03-02 11:29:28', 'test%a', '12345602', 'test2', '2020-03-02 16:34:19');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO orders_202007 VALUES ('100003', 'bee', 'Bee', '97.01', '2020-03-02 11:29:28', 'testx%', '12345603', 'test3', '2020-03-02 16:34:19');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO test_user VALUES ('800001', 'beeUser@163.com', null, 'Bee', 'bee', 'bee', null);
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO test_user VALUES ('800002', 'honey@163.com', 'cn', 'Honey', 'honey', 'honey', null);
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc VALUES ('456537470402562', 'test', '100', '100', 'test segment', '2020-07-04 22:42:09', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc VALUES ('456537470402563', 'order', '100', '100', 'order segment', '2020-07-04 22:42:10', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc VALUES ('456537470402564', 'bee', '100', '100', 'order segment', '2020-09-19 19:05:10', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc2 VALUES ('456537470402562', 'test', '100', '100', 'test segment', '2020-07-04 22:42:09', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc2 VALUES ('456537470402563', 'order', '100', '100', 'order segment', '2020-07-04 22:42:10', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] PreparedSqlLib modify SQL: INSERT INTO leaf_alloc2 VALUES ('456537470402564', 'bee', '100', '100', 'order segment', '2020-09-19 19:05:10', '1');
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [bee-exam] ====================SuidExam.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 6
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and name=?   [values]: 100001,Bee(ORM Framework)
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and name=?   [values]: 100001,Bee(ORM Framework)
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] [Bee] update SQL: update orders set  name=? where id=?   [values]: Bee(ORM Framework),100001
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] update record:1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total) values (?,?,?,?)   [values]: 578156697458040833,bee,Bee-ORM Framework,91.99
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total) values (?,?,?,?)   [values]: 578156697458040834,bee,Bee-ORM Framework,91.99
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total) values (?,?,?,?)   [values]: 578156697458040835,bee,Bee-ORM Framework,91.99
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] delete SQL: delete from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] delete record:0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee]  | <--  select rows: 6
[INFO] Orders[id=100002,userid=bee,name=Bee,total=96,createtime=2020-03-02 11:29:28,remark=test%a,sequence=12345602,abc=test2,updatetime=2020-03-02 16:34:19]
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] Orders[id=100003,userid=bee,name=Bee,total=97,createtime=2020-03-02 11:29:28,remark=testx%,sequence=12345603,abc=test3,updatetime=2020-03-02 16:34:19]
[INFO] Orders[id=578156697458040833,userid=bee,name=Bee-ORM Framework,total=92,createtime=null,remark=null,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156697458040834,userid=bee,name=Bee-ORM Framework,total=92,createtime=null,remark=null,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156697458040835,userid=bee,name=Bee-ORM Framework,total=92,createtime=null,remark=null,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=?   [values]: bee,Bee-ORM Framework,91.99
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 6
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 6
[WARN] Do not get the new Connection in the SameConnection.Maybe all the results get from cache! 
[INFO] [bee-exam] ====================SuidExam.test======end.

[INFO] [bee-exam] ====================SuidExamEN.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and name=?   [values]: 100001,Bee(ORM Framework)
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] [Bee] update SQL: update orders set  name=? where id=?   [values]: Bee(ORM Framework),100001
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] update record:1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total) values (?,?,?,?)   [values]: 578156697458040836,bee,Bee,91.99
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] delete SQL: delete from orders where userid=? and name=? and total=?   [values]: bee,Bee,91.99
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] delete record:0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and name=?   [values]: 100001,Bee(ORM Framework)
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] [bee-exam] ====================SuidExamEN.test======end.

[INFO] [bee-exam] ====================SuidRichExam.test======start:
[INFO] ==============orders.getId(): null
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,remark) values (?,?,?,?,?)   [values]: 578156697458040837,client,client,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,createtime,remark,abc,updatetime) values (?,?,?,?,?,?,?,?)   [values]: 578156697458040838,client,client,93.99,null,testOneTime,null,null
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] ==============orders.getId(): null
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,remark,sequence) values (?,?,?,?,?,?)   [values]: 578156701753008129,client,client,93.99,testOneTime,
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] ==============orders.getId(): null
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)   [values]: 578156701753008130,client,client,93.99,null,testOneTime,,null,null
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? , remark=? where userid=? and total=?   [values]: client,testOneTime,client,93.99
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum1:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? where userid=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum2:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? where userid=? and total=? and remark=? and sequence=?   [values]: client,client,93.99,testOneTime,
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum4:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? where userid=? and total=? and createtime is null and remark=? and abc is null and updatetime is null   [values]: client,client,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum5:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? where userid=? and total=? and createtime is null and remark=? and sequence=? and abc is null and updatetime is null   [values]: client,client,93.99,testOneTime,
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum6:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? , total=? where userid=? and remark=? and sequence=?   [values]: client,93.99,client,testOneTime,
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum4_2:  0
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? , total=? where userid=? and createtime is null and remark=? and abc is null and updatetime is null   [values]: client,93.99,client,testOneTime
[INFO] [Bee]  | <--  Affected rows: 4
[INFO] updateNum5_2:  4
[INFO] [Bee] update SQL(updateFields) :update orders set  name=? , total=? where userid=? and createtime is null and remark=? and sequence=? and abc is null and updatetime is null   [values]: client,93.99,client,testOneTime,
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum6_2:  0
[INFO] [Bee] select fun SQL : select count(total) from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[INFO] [Bee] select fun SQL : select max(total) from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[INFO] [Bee] select fun SQL : select min(total) from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[INFO] [Bee] select fun SQL : select avg(total) from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee] select fun SQL : select sum(total) from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,93.99,testOneTime
[INFO] funCount:0
[INFO] funMax:
[INFO] funMin:
[INFO] funAvg:
[INFO] funSum:
[WARN]  [ID WOULD BE REPLACED] class org.teasoft.exam.bee.osql.entity.Orders 's id field value is 100 would be replace by 578156706047975424
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,createtime,remark,abc,updatetime) values (?,?,?,?,?,?,?,?)   [values]: 578156706047975424,client00,client01,93.99,null,testOneTime,null,null
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] update SQL: update orders set  userid=? , name=? , total=? , remark=? , sequence=? where id=?   [values]: client00,client01,93.99,testOneTime,,100
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum8:  0
[INFO] [Bee] update SQL: update orders set  userid=? , name=? , total=? , createtime =null , remark=? , abc =null , updatetime =null where id=?   [values]: client00,client01,93.99,testOneTime,100
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum9:  0
[INFO] [Bee] update SQL: update orders set  userid=? , name=? , total=? , createtime =null , remark=? , sequence=? , abc =null , updatetime =null where id=?   [values]: client00,client01,93.99,testOneTime,,100
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum10:  0
[INFO] [Bee] delete SQL: delete from orders where id=? and userid=? and name=? and total=? and remark=?   [values]: 100,client00,client01,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] deleteNum: 0
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1004 would be replace by 578156706047975425
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1005 would be replace by 578156706047975426
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1006 would be replace by 578156706047975427
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156706047975425,client01,null,91,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156706047975426,client02,null,20,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~1] Affected rows: 2
[INFO] [Bee] --> index:2 ,  [values]: 578156706047975427,client03,null,23,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[2~2] Affected rows: 1
[INFO] 3
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1007 would be replace by 578156706047975428
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1008 would be replace by 578156706047975429
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1009 would be replace by 578156706047975430
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156706047975428,client01,null,91,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156706047975429,client02,null,20,null,testOneTime,null,null,null
[INFO] [Bee] --> index:2 ,  [values]: 578156706047975430,client03,null,23,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~2] Affected rows: 3
[INFO] 3
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Ljava.lang.Object; 's id field value is 10010 would be replace by 578156706047975431
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Ljava.lang.Object; 's id field value is 10011 would be replace by 578156706047975432
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Ljava.lang.Object; 's id field value is 10012 would be replace by 578156706047975433
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156706047975431,client01,null,91,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156706047975432,client02,null,20,null,testOneTime,null,null,null
[INFO] [Bee] --> index:2 ,  [values]: 578156706047975433,client03,null,23,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~2] Affected rows: 3
[INFO] 3
[INFO] [Bee] select SQL(selectFields) : select name, total from orders where userid=?   [values]: bee
[INFO] [Bee]  | <--  select rows: 6
[INFO] 6
[INFO] [Bee] List<String[]> select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=?   [values]: client01
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL(selectFields) : select id, userid, total, createtime from orders where userid=?   [values]: client01
[INFO] [Bee]  | <--  select rows: 3
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] 578156706047975428  , 
[INFO] client01  , 
[INFO] 91  , 
[INFO] null  , 
[INFO] 
[INFO] 578156706047975425  , 
[INFO] client01  , 
[INFO] 91  , 
[INFO] null  , 
[INFO] 
[INFO] 578156706047975431  , 
[INFO] client01  , 
[INFO] 91  , 
[INFO] null  , 
[INFO] 
[INFO] test paging
[INFO] Oracle
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=?   [values]: testOneTime
[INFO] [Bee]  | <--  select rows: 14
[INFO] [Bee] select SQL(entity,size): select * from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? ) where rownum <= ?   [values]: testOneTime,3
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select(entity,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? ) table_ where rownum < ?) where rn_ >= ?   [values]: testOneTime,3,0
[INFO] [Bee]  | <--  select rows: 2
[INFO] Orders[id=578156697458040838,userid=client,name=client,total=94,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156701753008130,userid=client,name=client,total=94,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Ljava.lang.Object; 's id field value is 100018 would be replace by 578156714637910016
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Ljava.lang.Object; 's id field value is 100019 would be replace by 578156714637910017
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Ljava.lang.Object; 's id field value is 100020 would be replace by 578156714637910018
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156714637910016,client18,null,18.18,null,test insert and delete,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156714637910017,client19,null,19.19,null,test insert and delete,null,null,null
[INFO] [Bee]  | <-- index[0~1] Affected rows: 2
[INFO] [Bee] --> index:2 ,  [values]: 578156714637910018,client20,null,20.20,null,test insert and delete,null,null,null
[INFO] [Bee]  | <-- index[2~2] Affected rows: 1
[INFO] [Bee] delete SQL: delete from orders where remark=?   [values]: test insert and delete
[INFO] [Bee]  | <--  Affected rows: 3
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Ljava.lang.Object; 's id field value is 100018 would be replace by 578156714637910019
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Ljava.lang.Object; 's id field value is 100019 would be replace by 578156714637910020
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Ljava.lang.Object; 's id field value is 100020 would be replace by 578156714637910021
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156714637910019,client18,null,18.18,null,test insert and delete,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156714637910020,client19,null,19.19,null,test insert and delete,null,null,null
[INFO] [Bee] --> index:2 ,  [values]: 578156714637910021,client20,null,20.20,null,test insert and delete,null,null,null
[INFO] [Bee]  | <-- index[0~2] Affected rows: 3
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Ljava.lang.Object; 's id field value is 100021 would be replace by 578156714637910022
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Ljava.lang.Object; 's id field value is 100022 would be replace by 578156714637910023
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Ljava.lang.Object; 's id field value is 100023 would be replace by 578156714637910024
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156714637910022,client18,null,18.18,null,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156714637910023,client19,null,19.19,null,null,null,null
[INFO] [Bee] --> index:2 ,  [values]: 578156714637910024,client20,null,20.20,null,null,null,null
[INFO] [Bee]  | <-- index[0~2] Affected rows: 3
[INFO] [Bee] select fun SQL : select count(*) from orders where remark=?   [values]: test insert and delete
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=?   [values]: test insert and delete
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] selectJson SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=?   [values]: test insert and delete
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] selectJson SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? and id>=?   [values]: test insert and delete,100018
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] selectJson SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee] select fun SQL : select count(*) from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee] selectOrderBy SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? order by id asc   [values]: test insert and delete
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] selectOrderBy SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? order by id asc,name desc   [values]: test insert and delete
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and remark=?   [values]: 100021,test insert and delete
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select(entity,selectFields,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id, remark, userid from orders where id=? and remark=? ) table_ where rownum < ?) where rn_ >= ?   [values]: 100021,test insert and delete,10,0
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select fun SQL : select max(total) from orders where id=? and remark=? and id>=?   [values]: 100021,test insert and delete,100018
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee] update SQL(whereFields) :update orders set  remark=? where id>=?   [values]: test insert and delete,100018
[INFO] [Bee]  | <--  Affected rows: 24
[INFO] [Bee] update SQL(condition) :update orders set remark=? where remark=? and id=?   [values]: test update,test insert and delete,100023
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] delete SQL: delete from orders where id=? and remark=?   [values]: 100021,test insert and delete
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] delete SQL: delete from orders where remark=? and id>=?   [values]: test insert and delete,100018
[INFO] [Bee]  | <--  Affected rows: 24
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100021
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100022
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100023
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] select(entity,selectFields,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id, remark, userid from orders where id=? and remark=? ) table_ where rownum < ?) where rn_ >= ?   [values]: 100021,test insert and delete,15,5
[INFO] [Bee]  | <--  select rows: 0
[INFO] =====================================
[INFO] [Bee] select SQL: select * from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and id=? ) where rownum <= ? for update    [values]: bee,100003,300
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100003,userid=bee,name=Bee,total=97,createtime=2020-03-02 11:29:28,remark=testx%,sequence=12345603,abc=test3,updatetime=2020-03-02 16:34:19]
[INFO] [Bee] update SQL: update orders set  remark=? where id=?   [values]: test,100003
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] select SQL(selectFields) : select name, total from orders where userid=?   [values]: bee
[INFO] [Bee]  | <--  select rows: 2
[INFO] [bee-exam] ====================SuidRichExam.test======end.

[INFO] [bee-exam] ====================UpdateByExam.test======start:
[INFO] [Bee] update SQL(whereFields) :update orders set  total=? , remark=? where userid=?   [values]: 100,new2,bee
[INFO] [Bee]  | <--  Affected rows: 2
[INFO] update number:  2
[INFO] IncludeType.INCLUDE_BOTH
[INFO] [Bee] update SQL(whereFields) :update orders set  total=? , createtime =null , remark=? , sequence=? , abc =null , updatetime =null where userid=? and name is null   [values]: 100,new2,,bee
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] update number:  0
[INFO] IncludeType.INCLUDE_NULL
[INFO] [Bee] update SQL(whereFields) :update orders set  name =null , total=? , createtime =null , remark=? , abc =null , updatetime =null where userid=?   [values]: 100,new2,bee
[INFO] [Bee]  | <--  Affected rows: 2
[INFO] IncludeType.INCLUDE_EMPTY
[INFO] [Bee] update SQL(whereFields) :update orders set  total=? , remark=? , sequence=? where userid=?   [values]: 100,new2,,bee
[INFO] [Bee]  | <--  Affected rows: 2
[INFO] [bee-exam] ====================UpdateByExam.test======end.

[INFO] [bee-exam] ====================PreparedSqlExam.test======start:
[INFO] getCustomSql:  select * from orders where userid=?
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [Bee]  | <--  select rows: 2
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [Bee]  | <--  select rows: 2
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [Bee]  | <--  select rows: 2
[INFO] [Bee] PreparedSqlLib selectSomeField SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,5,2
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100003,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] PreparedSqlLib selectJson SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [{"id":100002,"userid":"bee","total":100,"remark":"new2","rn_":1},{"id":100003,"userid":"bee","total":100,"remark":"new2","rn_":2}]
[INFO] getCustomSql:  select * from orders where userid=#{userid}
[INFO] [Bee] PreparedSqlLib selectSomeField SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [Bee]  | <--  select rows: 2
[INFO] [Bee] PreparedSqlLib selectSomeField SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 2
[INFO] Orders[id=100002,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=100003,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] PreparedSqlLib selectJson SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where userid=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,4,1
[INFO] [{"id":100002,"userid":"bee","total":100,"remark":"new2","rn_":1},{"id":100003,"userid":"bee","total":100,"remark":"new2","rn_":2}]
[INFO] getCustomSql:  select * from orders where name like #{name%}
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where name like ? ) table_ where rownum < ?) where rn_ >= ?   [values]: Bee%,4,1
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where name like ? ) table_ where rownum < ?) where rn_ >= ?   [values]: %Bee,4,1
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders where name like ? ) table_ where rownum < ?) where rn_ >= ?   [values]: %Bee%,4,1
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] getCustomSql:  select * from orders
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders ) table_ where rownum < ?) where rn_ >= ?   [values]: 4,1
[INFO] [Bee]  | <--  select rows: 3
[INFO] Orders[id=100002,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] Orders[id=100003,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select table_.*, rownum rn_ from ( select * from orders ) table_ where rownum < ?) where rn_ >= ?   [values]: 4,1
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] PreparedSqlLib select SQL: select orders.userid,test_user.name,orders.total,orders.createtime from orders,test_user where orders.userid=test_user.username and orders.sequence=?   [values]: 123456
[INFO] [Bee]  | <--  select rows: 0
[INFO] [bee-exam] ====================PreparedSqlExam.test======end.

[INFO] [bee-exam] ====================TransactionExam.test======start:
[INFO] [Bee] insert SQL: insert into test_user(id,password,username) values (?,?,?)   [values]: 578156731817779201,bee-user,testuser
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,remark) values (?,?,?,?,?)   [values]: 578156731817779200,bee,Bee(ORM Framework),91.99,test transaction
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=? and remark=?   [values]: bee,Bee(ORM Framework),91.99,test transaction
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and id=? for update    [values]: bee,100003
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100003,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] ---------------locking the record!
[INFO] doing...
[INFO] ---------------release the record!
[INFO] [Bee] select SQL(selectFields) : select name, total from orders where userid=?   [values]: bee
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] update SQL(condition) :update leaf_alloc set max_id=max_id+step where biz_tag=?   [values]: bee
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=?   [values]: bee
[INFO] [Bee]  | <--  select rows: 1
[INFO] LeafAlloc[id=456537470402564,bizTag=bee,maxId=200,step=100,description=order segment,updateTime=2020-09-19 19:05:10.0,version=1]
[INFO] [Bee] select(entity,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,11,1
[INFO] [Bee]  | <--  select rows: 1
[INFO] [bee-exam] ====================TransactionExam.test======end.

[INFO] [bee-exam] ====================ConditionExam.test======start:
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid like ? and total between ? and ? and name is not null order by userid asc ) table_ where rownum < ?) where rn_ >= ?   [values]: bee%,90,100,10,0
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=578156731817779200,userid=bee,name=Bee(ORM Framework),total=92,createtime=null,remark=test transaction,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select userid, total, createtime from orders where userid like ? and total between ? and ? and name is not null order by userid asc ) table_ where rownum < ?) where rn_ >= ?   [values]: bee%,90,100,10,0
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=null,userid=bee,name=null,total=92,createtime=null,remark=null,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] insert SQL: insert into orders(id,userid,total,remark) values (?,?,?,?)   [values]: 578156736112746496,test condition,0.01,test condition delete
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] insert SQL: insert into orders(id,userid,total,remark) values (?,?,?,?)   [values]: 578156736112746497,test condition,0.01,test condition delete
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] delete SQL: delete from orders where userid=? and remark like ? and total<=?   [values]: test condition,test condition %,0.01
[INFO] [Bee]  | <--  Affected rows: 2
[INFO] delete(T entity,Condition condition), delete record num:2
[INFO] [Bee] update SQL(whereFields) :update orders set  abc=? where total>=? and remark like ?   [values]: test for update,97,test%
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateBy_NumByCondition: 0
[INFO] [Bee] update SQL(updateFields) :update orders set total=total+? , remark=? where abc=? and total>=? and remark like ?   [values]: 1,test for set,test for update,97,test%
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNumCondition: 0
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and id=? for update    [values]: bee,100003
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100003,userid=bee,name=null,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] select SQL: select userid from orders group by userid having count(userid)>=?   [values]: 1
[INFO] [Bee]  | <--  select rows: 2
[INFO] [Bee] update SQL(condition) :update orders set name=userid where name is null
[INFO] [Bee]  | <--  Affected rows: 2
[INFO] updateNum use SetWithField: 2
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where name=userid
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 2
[INFO] record num by select use opWithField: 2
[INFO] [Bee] select SQL: select userid from orders group by userid having count(*)>=? and count(distinct(userid))>=?   [values]: 2,1
[INFO] [Bee]  | <--  select rows: 1
[INFO] 1
[INFO] [bee-exam] ====================ConditionExam.test======end.

[INFO] [bee-exam] ====================MoreTableExam.test======start:
[WARN] Auto table: parameter  ${month} in orders${month} still has not value, will be ignore it!
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select orders.id,orders.userid,orders.name,orders.total,orders.createtime,orders.remark,orders.sequence,orders.abc,orders.updatetime,test_user.id  test_user_id_$,test_user.email,test_user.last_name,test_user.name  test_user_name_$,test_user.password,test_user.username,test_user.createtime  test_user_createtime_$ from orders,test_user where orders.userid=test_user.username and orders.name=test_user.name and orders.userid=? and orders.name=? and test_user.name=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,Bee,Bee,10,0
[INFO] [Bee]  | <--  select rows: 0
[INFO] size of records:0
[WARN] Auto table: parameter  ${month} in orders${month} still has not value, will be ignore it!
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select orders.id,orders.userid,orders.name,orders.total,orders.createtime,orders.remark,orders.sequence,orders.abc,orders.updatetime,test_user.id  test_user_id_$,test_user.email,test_user.last_name,test_user.name  test_user_name_$,test_user.password,test_user.username,test_user.createtime  test_user_createtime_$ from orders,test_user where orders.userid=test_user.username and orders.name=test_user.name and orders.userid=? and orders.name=? and test_user.name=? and orders.id>=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,Bee,Bee,1001,5,0
[INFO] [Bee]  | <--  select rows: 0
[INFO] size of records:0
[WARN] Auto table: parameter  ${month} in orders${month} still has not value, will be ignore it!
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select orders.id, test_user.id test_user_id_$, userid, total, orders.createtime from orders,test_user where orders.userid=test_user.username and orders.name=test_user.name and orders.userid=? and orders.name=? and test_user.name=? and orders.id>=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,Bee,Bee,1001,5,0
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 0
[INFO] size of records:0
[INFO] [Bee] select SQL: select assignexam.id,assignexam.classno,assignexam.term,assignexam.examno,assignexam.subjectno,assignexam.subject,assignexam.creater,assignexam.createtime,assignexam.updater,assignexam.updatetime,assignexam.remark,assignexam.ext1,assignexam.status,assignexam.schoolno,assigncourse.id  assigncourse_id_$,assigncourse.classno  assigncourse_classno_$,assigncourse.term  assigncourse_term_$,assigncourse.teacherno,assigncourse.name,assigncourse.subjectno  assigncourse_subjectno_$,assigncourse.subject  assigncourse_subject_$,assigncourse.creater  assigncourse_creater_$,assigncourse.createtime  assigncourse_createtime_$,assigncourse.updater  assigncourse_updater_$,assigncourse.updatetime  assigncourse_updatetime_$,assigncourse.remark  assigncourse_remark_$,assigncourse.status  assigncourse_status_$,assigncourse.schoolno  assigncourse_schoolno_$ from assignexam,assigncourse where assignexam.classno=assigncourse.classno and assignexam.term=assigncourse.term and assignexam.subjectno=assigncourse.subjectno and assignexam.status=? and assigncourse.status=?   [values]: 1,1
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select assignexam.id,assignexam.classno,assignexam.term,assignexam.examno,assignexam.subjectno,assignexam.subject,assignexam.creater,assignexam.createtime,assignexam.updater,assignexam.updatetime,assignexam.remark,assignexam.ext1,assignexam.status,assignexam.schoolno,assigncourse.id  assigncourse_id_$,assigncourse.classno  assigncourse_classno_$,assigncourse.term  assigncourse_term_$,assigncourse.teacherno,assigncourse.name,assigncourse.subjectno  assigncourse_subjectno_$,assigncourse.subject  assigncourse_subject_$,assigncourse.creater  assigncourse_creater_$,assigncourse.createtime  assigncourse_createtime_$,assigncourse.updater  assigncourse_updater_$,assigncourse.updatetime  assigncourse_updatetime_$,assigncourse.remark  assigncourse_remark_$,assigncourse.status  assigncourse_status_$,assigncourse.schoolno  assigncourse_schoolno_$ from assignexam,assigncourse where assignexam.classno=assigncourse.classno and assignexam.term=assigncourse.term and assignexam.subjectno=assigncourse.subjectno and assignexam.classno=? and assignexam.status=? and assigncourse.status=?   [values]: aaa,1,1
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] delete SQL: delete from assigncourse where id=?   [values]: 344343344343
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] select SQL: select assignexam.id,assignexam.classno,assignexam.term,assignexam.examno,assignexam.subjectno,assignexam.subject,assignexam.creater,assignexam.createtime,assignexam.updater,assignexam.updatetime,assignexam.remark,assignexam.ext1,assignexam.status,assignexam.schoolno,assigncourse.id  assigncourse_id_$,assigncourse.classno  assigncourse_classno_$,assigncourse.term  assigncourse_term_$,assigncourse.teacherno,assigncourse.name,assigncourse.subjectno  assigncourse_subjectno_$,assigncourse.subject  assigncourse_subject_$,assigncourse.creater  assigncourse_creater_$,assigncourse.createtime  assigncourse_createtime_$,assigncourse.updater  assigncourse_updater_$,assigncourse.updatetime  assigncourse_updatetime_$,assigncourse.remark  assigncourse_remark_$,assigncourse.status  assigncourse_status_$,assigncourse.schoolno  assigncourse_schoolno_$ from assignexam,assigncourse where assignexam.classno=assigncourse.classno and assignexam.term=assigncourse.term and assignexam.subjectno=assigncourse.subjectno and assignexam.classno=? and assignexam.status=? and assigncourse.status=?   [values]: aaa,1,1
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select orders_202007.id,orders_202007.userid,orders_202007.name,orders_202007.total,orders_202007.createtime,orders_202007.remark,orders_202007.sequence,orders_202007.abc,orders_202007.updatetime,test_user.id  test_user_id_$,test_user.email,test_user.last_name,test_user.name  test_user_name_$,test_user.password,test_user.username,test_user.createtime  test_user_createtime_$ from orders_202007,test_user where orders_202007.userid=test_user.username and orders_202007.name=test_user.name and orders_202007.userid=? and orders_202007.name=? and test_user.name=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,Bee,Bee,10,0
[INFO] [Bee]  | <--  select rows: 2
[INFO] Orders[id=100003,userid=bee,name=Bee,total=97,createtime=2020-03-02 11:29:28,remark=testx%,sequence=12345603,abc=test3,updatetime=2020-03-02 16:34:19,TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]]
[INFO] Orders[id=100002,userid=bee,name=Bee,total=96,createtime=2020-03-02 11:29:28,remark=test%a,sequence=12345602,abc=test2,updatetime=2020-03-02 16:34:19,TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]]
[WARN] Auto table: parameter  ${month} in orders${month} still has not value, will be ignore it!
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select orders.id,orders.userid,orders.name,orders.total,orders.createtime,orders.remark,orders.sequence,orders.abc,orders.updatetime,test_user.id  test_user_id_$,test_user.email,test_user.last_name,test_user.name  test_user_name_$,test_user.password,test_user.username,test_user.createtime  test_user_createtime_$ from orders,test_user where orders.userid=test_user.username and orders.name=test_user.name and orders.userid=? and orders.name=? and test_user.name=? ) table_ where rownum < ?) where rn_ >= ?   [values]: bee,Bee,Bee,10,0
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 0
[INFO] [bee-exam] ====================MoreTableExam.test======end.

[INFO] [bee-exam] ====================UseJson.test======start:
[INFO] [Bee] selectJson SQL: select id,email,last_name,name,password,username,createtime from test_user
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] selectJson(new TestUser()):
[INFO] [{"id":800002,"email":"honey@163.com","lastName":"cn","name":"Honey","password":"honey","username":"honey"},{"id":800001,"email":"beeUser@163.com","name":"Bee","password":"bee","username":"bee"},{"id":578156731817779201,"password":"bee-user","username":"testuser"}]
[INFO] 将直接查询的json转成对象:
[INFO] TestUser[id=800002,email=honey@163.com,lastName=cn,name=Honey,password=honey,username=honey,createtime=null]
[INFO] TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]
[INFO] TestUser[id=578156731817779201,email=null,lastName=null,name=null,password=bee-user,username=testuser,createtime=null]
[INFO] [Bee] select SQL: select id,email,last_name,name,password,username,createtime from test_user
[INFO] [Bee]  | <--  select rows: 3
[INFO] TestUser[id=800002,email=honey@163.com,lastName=cn,name=Honey,password=honey,username=honey,createtime=null]
[INFO] TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]
[INFO] TestUser[id=578156731817779201,email=null,lastName=null,name=null,password=bee-user,username=testuser,createtime=null]
[INFO] [Bee] selectJson SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] selectJson(new Orders()):
[INFO] [{"id":100002,"userid":"bee","name":"bee","total":100,"remark":"new2"},{"id":100001,"userid":"Bee","name":"Bee(ORM Framework)","total":95,"createtime":"2020-03-02 11:29:28","remark":"test","sequence":"12345601","abc":"test1"},{"id":100003,"userid":"bee","name":"bee","total":100,"remark":"new2"},{"id":578156731817779200,"userid":"bee","name":"Bee(ORM Framework)","total":92,"remark":"test transaction"}]
[INFO] 将直接查询的json转成对象:
[INFO] Orders[id=100002,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] Orders[id=100003,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156731817779200,userid=bee,name=Bee(ORM Framework),total=92,createtime=null,remark=test transaction,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee]  | <--  select rows: 4
[INFO] Orders[id=100002,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] Orders[id=100003,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156731817779200,userid=bee,name=Bee(ORM Framework),total=92,createtime=null,remark=test transaction,sequence=null,abc=null,updatetime=null]
[INFO] [bee-exam] ====================UseJson.test======end.

[INFO] [bee-exam] ====================BugTest.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 4
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 4
[INFO] [Bee] selectJson SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 10010 would be replace by 578156744702681088
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 10011 would be replace by 578156744702681089
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1012 would be replace by 578156744702681090
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156744702681088,client01,null,91,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156744702681089,client02,null,20,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~1] Affected rows: 2
[INFO] [Bee] --> index:2 ,  [values]: 578156744702681090,client03,null,23,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[2~2] Affected rows: 1
[INFO] 3
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 7
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders
[INFO] [Bee]  | <--  select rows: 7
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders
[INFO] [Bee]  | <--  select rows: 7
[WARN] Use Condition's set method(s) in SELECT type, but it just effect in UPDATE type! Involved field(s): [test]
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark like ?   [values]: test\%%
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100021
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100022
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] deleteById SQL: delete from orders where id=?   [values]: 100023
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [Bee] selectOrderBy SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? order by id asc,name desc   [values]: testOneTime
[INFO] [Bee]  | <--  select rows: 3
[INFO] Orders[id=578156744702681088,userid=client01,name=null,total=91,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156744702681089,userid=client02,name=null,total=20,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156744702681090,userid=client03,name=null,total=23,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] [bee-exam] ====================BugTest.test======end.

[INFO] [bee-exam] ====================UpdateSetExam.test======start:
[INFO] [Bee] update SQL(whereFields) :update leaf_alloc set max_id=max_id+step where biz_tag=?   [values]: bee
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setAdd , update num: 1
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=?   [values]: test
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] update SQL(condition) :update leaf_alloc set max_id=max_id+step,version=version+? where id=? and biz_tag=? and max_id=? and version=?   [values]: 1,456537470402562,test,100,1
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setMultiply , update num: 1
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=?   [values]: test
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] update SQL(condition) :update leaf_alloc set max_id=?,version=version+? where id=? and biz_tag=? and max_id=? and version=?   [values]: 10003,1,456537470402562,test,200,2
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setMultiply , update num: 1
[INFO] [Bee] update SQL(whereFields) :update orders set total=total+? , remark=? where id=? and total>=?   [values]: 1,updateById,1004,90
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] [bee-exam] ====================UpdateSetExam.test======end.

[INFO] [bee-exam] ====================InsertTest.test======start:
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,remark) values (?,?,?,?,?)   [values]: 578156748997648384,client,client,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] 1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,remark) values (?,?,?,?,?)   [values]: 578156748997648385,client,client,93.99,testOneTime
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] 1
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156761882550272,client,client,93.99,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156761882550273,client,client,94.99,null,testOneTime,,null,null
[INFO] [Bee] --> index:2 ,  [values]: 578156761882550274,client,Bee,95.99,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~2] Affected rows: 3
[INFO] 3
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156761882550275,client,client,93.99,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156761882550276,client,client,94.99,null,testOneTime,,null,null
[INFO] [Bee]  | <-- index[0~1] Affected rows: 2
[INFO] [Bee] --> index:2 ,  [values]: 578156761882550277,client,Bee,95.99,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[2~2] Affected rows: 1
[INFO] 3
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where userid=? and name=? and total=? and remark=?   [values]: client,client,94.99,testOneTime
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156761882550278,client,client,93.99,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~0] Affected rows: 1
[INFO] [bee-exam] ====================InsertTest.test======end.

[INFO] [bee-exam] ====================DynamicTableExam.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from Orders_202007
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc2
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL(entity,size): select * from ( select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc2 ) where rownum <= ?   [values]: 5
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL(entity,size): select * from ( select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc2 ) where rownum <= ?   [values]: 5
[INFO] [Bee]  | <--  select rows: 3
[WARN] Auto table: parameter  ${version} in LeafAlloc${version} still has not value, will be ignore it!
[INFO] [Bee] select SQL(entity,size): select * from ( select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc ) where rownum <= ?   [values]: 5
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc2
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 3
[WARN] Auto table: parameter  ${version} in LeafAlloc${version} still has not value, will be ignore it!
[INFO] [Bee] select SQL(entity,size): select * from ( select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc ) where rownum <= ?   [values]: 5
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 3
[INFO] 3
[INFO] [bee-exam] ====================DynamicTableExam.test======end.

[INFO] [bee-exam] ====================MoreSQLFunction.test======start:
[INFO] [Bee] selectJson SQL: select term, examno, subject,max(score) as maxScore,avg(score) as avgScore,min(score) as minScore from scores where status!=? group by term,examno,subjectno,subject order by term,examno,subjectno   [values]: FIN
[INFO] []
[INFO] [Bee] select SQL: select term, examno, subject,max(score) as maxScore,avg(score) as avgScore,min(score) as minScore from Scores where status!=? group by term,examno,subjectno,subject order by term,examno,subjectno   [values]: FIN
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] select SQL: select term, examno, subject,max(score) as maxScore,avg(score) as avgScore,min(score) as minScore from scores where status!=? group by term,examno,subjectno,subject order by term,examno,subjectno   [values]: FIN
[INFO] [Bee]  | <--  select rows: 0
[INFO] [bee-exam] ====================MoreSQLFunction.test======end.

[INFO] [bee-exam] ====================SelectFun.test======start:
[INFO] [Bee] select fun SQL : select count(*) from scores where teacherno=?   [values]: 60001
[INFO] 0
[INFO] [Bee] select SQL: select * from ( select table_.*, rownum rn_ from ( select id,classno,term,examno,subjectno,subject,stuno,name,teacherno,teachername,score,creater,createtime,updater,updatetime,remark,ext1,status,schoolno from scores where teacherno=? and status!=? and (classno=? or classno=?) ) table_ where rownum < ?) where rn_ >= ?   [values]: 60001,FIN,201,191(高中),10,0
[INFO] [Bee]  | <--  select rows: 0
[INFO] [bee-exam] ====================SelectFun.test======end.

[INFO] [bee-exam] ====================MapSuidExam.test======start:
[INFO] [Bee] In MapSuid, selectJson SQL: select name,password from test_user where name=? and last_name is null order by name   [values]: Bee
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [{"name":"Bee","password":"bee"}]
[INFO] [Bee] In MapSuid, selectMap SQL: select name,password from test_user where name=? and last_name is null order by name   [values]: Bee
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] In MapSuid, selectMap SQL: select name,password from test_user where name=? and last_name is null order by name   [values]: Bee
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] In MapSuid, selectOneMap SQL: select name,password from test_user where name=? and last_name is null order by name   [values]: Bee
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 1
[INFO] Bee
[INFO] bee
[INFO] [Bee] In MapSuid, selectOneMap SQL: select name,password from test_user where name=? and last_name is null order by name   [values]: Bee
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 1
[INFO] [bee-exam] ====================MapSuidExam.test======end.

[INFO] [bee-exam] ====================LockWaitTimeout.test======start:
[WARN]  [ID WOULD BE REPLACED] entity[0] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1004 would be replace by 578156766177517568
[WARN]  [ID WOULD BE REPLACED] entity[1] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1005 would be replace by 578156766177517569
[WARN]  [ID WOULD BE REPLACED] entity[2] : class [Lorg.teasoft.exam.bee.osql.entity.Orders; 's id field value is 1006 would be replace by 578156766177517570
[INFO] [Bee]  insert[] SQL : insert into orders(id,userid,name,total,createtime,remark,sequence,abc,updatetime) values (?,?,?,?,?,?,?,?,?)
[INFO] [Bee] --> index:0 ,  [values]: 578156766177517568,client01,null,91,null,testOneTime,null,null,null
[INFO] [Bee] --> index:1 ,  [values]: 578156766177517569,client02,null,20,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[0~1] Affected rows: 2
[INFO] [Bee] --> index:2 ,  [values]: 578156766177517570,client03,null,23,null,testOneTime,null,null,null
[INFO] [Bee]  | <-- index[2~2] Affected rows: 1
[INFO] 3
[INFO] test paging
[INFO] [Bee] select SQL(entity,size): select * from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? ) where rownum <= ?   [values]: testOneTime,3
[INFO] [Bee]  | <--  select rows: 3
[INFO] [Bee] select(entity,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where remark=? ) table_ where rownum < ?) where rn_ >= ?   [values]: testOneTime,3,0
[INFO] [Bee]  | <--  select rows: 2
[INFO] Orders[id=578156761882550277,userid=client,name=Bee,total=96,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156748997648384,userid=client,name=client,total=94,createtime=null,remark=testOneTime,sequence=null,abc=null,updatetime=null]
[INFO] [Bee] delete SQL: delete from orders where remark=?   [values]: testOneTime
[INFO] [Bee]  | <--  Affected rows: 15
[INFO] deleteNum2: 15
[INFO] [bee-exam] ====================LockWaitTimeout.test======end.

[INFO] [bee-exam] ====================SuidExamEN_SQLite.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders where id=? and name=?   [values]: 100001,Bee(ORM Framework)
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 1
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=null]
[INFO] [Bee] update SQL: update orders set  name=? , updatetime=? where id=?   [values]: Bee(ORM Framework),2021-04-08 00:23:33,100001
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] update record:1
[INFO] [Bee] insert SQL: insert into orders(id,userid,name,total,createtime) values (?,?,?,?,?)   [values]: 578156770472484864,bee,Bee(ORM Framework),91.99,2021-04-08 00:23:33
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] insert record:1
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee]  | <--  select rows: 5
[INFO] Orders[id=100002,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=100001,userid=Bee,name=Bee(ORM Framework),total=95,createtime=2020-03-02 11:29:28,remark=test,sequence=12345601,abc=test1,updatetime=2021-04-08 00:23:33]
[INFO] Orders[id=100003,userid=bee,name=bee,total=100,createtime=null,remark=new2,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156731817779200,userid=bee,name=Bee(ORM Framework),total=92,createtime=null,remark=test transaction,sequence=null,abc=null,updatetime=null]
[INFO] Orders[id=578156770472484864,userid=bee,name=Bee(ORM Framework),total=92,createtime=2021-04-08 00:23:33,remark=null,sequence=null,abc=null,updatetime=null]
[INFO] [bee-exam] ====================SuidExamEN_SQLite.test======end.

[INFO] [bee-exam] ====================UpdateSetExam_SQLite.test======start:
[INFO] [Bee] update SQL(whereFields) :update leaf_alloc set max_id=max_id+step where biz_tag=?   [values]: bee
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setAdd , update num: 1
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=?   [values]: test
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] update SQL(condition) :update leaf_alloc set max_id=max_id+step,version=version+? where id=? and biz_tag=? and max_id=? and version=?   [values]: 1,456537470402562,test,10003,3
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setMultiply , update num: 1
[INFO] [Bee] select SQL: select id,biz_tag,max_id,step,description,update_time,version from leaf_alloc where biz_tag=?   [values]: test
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] update SQL(condition) :update leaf_alloc set max_id=?,version=version+? where id=? and biz_tag=? and max_id=? and version=?   [values]: 10003,1,456537470402562,test,10103,4
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] test setMultiply , update num: 1
[INFO] [bee-exam] ====================UpdateSetExam_SQLite.test======end.

[INFO] [bee-exam] ====================SelectById.test======start:
[INFO] [Bee] selectByIds SQL: select id,email,last_name,name,password,username,createtime from test_user where id=? or id=?   [values]: 800001,800002
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 2
[INFO] TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]
[INFO] =============================================
[INFO] TestUser[id=800002,email=honey@163.com,lastName=cn,name=Honey,password=honey,username=honey,createtime=null]
[INFO] =============================================
[INFO] [Bee] selectById SQL: select id,email,last_name,name,password,username,createtime from test_user where id=?   [values]: 800001
[INFO] [Bee]  | <--  select rows: 1
[INFO] TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]
[INFO] [Bee] selectById SQL: select id,email,last_name,name,password,username,createtime from test_user where id=?   [values]: 800001
[INFO] [Bee]  | <--  select rows: 1
[INFO] [Bee] selectById SQL: select id,email,last_name,name,password,username,createtime from test_user where id=?   [values]: 800001
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 1
[INFO] TestUser[id=800001,email=beeUser@163.com,lastName=null,name=Bee,password=bee,username=bee,createtime=null]
[INFO] [Bee] deleteById SQL: delete from test_user where id=?   [values]: 800001
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] deleteNum3: 1
[WARN]  [ID WOULD BE REPLACED] class org.teasoft.exam.bee.osql.entity.TestUser 's id field value is 800001 would be replace by 578156770472484864
[INFO] [Bee] insert SQL: insert into test_user(id,email,name,password,username) values (?,?,?,?,?)   [values]: 578156770472484864,beeUser@163.com,Bee,bee,bee
[INFO] [Bee]  | <--  Affected rows: 1
[INFO] [Bee] selectJson SQL: select id,email,last_name,name,password,username,createtime from test_user
[INFO] selectJson(new User()):
[INFO] [{"id":800002,"email":"honey@163.com","lastName":"cn","name":"Honey","password":"honey","username":"honey"},{"id":578156770472484864,"email":"beeUser@163.com","name":"Bee","password":"bee","username":"bee"},{"id":578156731817779201,"password":"bee-user","username":"testuser"}]
[INFO] [bee-exam] ====================SelectById.test======end.

[INFO] [bee-exam] ====================ObjSQLServiceExam.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 5
[INFO] [Bee] select(entity,start,size) SQL: select * from ( select table_.*, rownum rn_ from ( select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders ) table_ where rownum < ?) where rn_ >= ?   [values]: 10,0
[WARN] [Bee] ==========Cache would be full!
[WARN] [Bee] ==========Cache already used more than 90% !
[INFO] [Bee]  | <--  select rows: 5
[INFO] [bee-exam] ====================ObjSQLServiceExam.test======end.

[INFO] [bee-exam] ====================NamingTest.test======start:
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from orders
[INFO] [Bee] ==========get from Cache.
[INFO] [Bee]  | <--  select rows: 5
[INFO] [Bee] select SQL: select id,userid,name,total,createtime,remark,sequence,abc,updatetime from Orders
[INFO] [Bee]  | <--  select rows: 5
[INFO] [Bee] select SQL: select ID,USERID,NAME,TOTAL,CREATETIME,REMARK,SEQUENCE,ABC,UPDATETIME from ORDERS
[INFO] [Bee]  | <--  select rows: 5
[INFO] [bee-exam] ====================NamingTest.test======end.

[INFO] [bee-exam] ====================IdTest.test======start:
[INFO] 0: 111111111100010000000011000000110100001100000000000000000000001
[INFO] 1: 111111111100010000000011000000110100001100000000000000000000010
[INFO] 2: 111111111100010000000011000000110100001100000000000000000000011
[INFO] 使用时间: 1
[INFO] 0: 100000000110000001101000011000000000011111111110000000000000
[INFO] 1: 100000000110000001101000011000000000011111111110000000000001
[INFO] 2: 100000000110000001101000011000000000011111111110000000000010
[INFO] 3: 100000000110000001101000011000000000011111111110000000000011
[INFO] 4: 100000000110000001101000011000000000011111111110000000000100
[INFO] 使用时间: 2
[INFO] [bee-exam] ====================IdTest.test======end.

[INFO] [bee-exam] ====================ChainUpdateExam.test======start:
[INFO] update orders set name='Bee' , userid='Bee' , total=98.8 where (id>=100005 or id in (100004)) and name is not null  and createtime is null  and id not in (100001) and id in (100002,100003) and id between 100002 and 100004 and id not between 100005 and 100006 and name not in ('Bee')
[INFO] Getting this sql twice is same!
[INFO] [Bee] PreparedSqlLib modify SQL: update orders set name='Bee' , userid='Bee' , total=98.8 where (id>=100005 or id in (100004)) and name is not null  and createtime is null  and id not in (100001) and id in (100002,100003) and id between 100002 and 100004 and id not between 100005 and 100006 and name not in ('Bee')
[INFO] [Bee]  | <--  Affected rows: 0
[INFO] updateNum: 0
[INFO] update team_id set total=11 , remark='test' where 1=1 and price=99 and price>=99 and name like 'Bee%' and remark='test2' and orderid in ('111','112')
[INFO] update team_id set total=11 , remark='test' where 1=1 and price=99 and price>=99 and name like 'Bee%' and remark='test2' and orderid in ('111','112')
[INFO] [bee-exam] ====================ChainUpdateExam.test======end.

[INFO] [bee-exam] ====================ChainSelectExam.test======start:
[INFO] [Bee] PreparedSqlLib select SQL: select name,max(total) from orders where name not like 'Bee%' and total between 10 and 100 and createtime is not null  group by name order by name asc
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select name,max(total) from orders where name='client' or name='bee' group by name having avg(total)>80
[INFO] [Bee]  | <--  select rows: 1
[INFO] bee   100   
[INFO] [Bee] PreparedSqlLib select SQL: select orders.id,total,orders.name,test_user.name from orders,test_user where orders.name=test_user.name and (total between 0 and 100) and orders.name='Bee'
[INFO] [Bee]  | <--  select rows: 0
[INFO] select distinct(team_id) from teams where price=99 group by team_id,name having count(*)=sum(case when status='aaa' then 1 else 0 end)
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders o join test_user t on o.name=t.name
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select id,examno,classno,name,teacherno,createtime,updatetime from scores where classno in ('201') ) where rownum <= 10
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select count(*) from scores where classno in ('201')
[INFO] [Bee]  | <--  select rows: 1
[INFO] 0   
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders where (id>=100005 or id in (100004)) and name is not null  and createtime is null  and id not in (100001) and id in (100002,100003) and id between 100002 and 100004 and id not between 100005 and 100006 and name not in ('testBee') and name='Bee' order by id
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders o left join test_user t on o.name=t.name
[INFO] [Bee]  | <--  select rows: 5
[INFO] 578156770472484864   bee   Bee(ORM Framework)   92   2021-04-08 00:23:33   null   null   null   null   null   null   null   null   null   null   null   
[INFO] 578156731817779200   bee   Bee(ORM Framework)   92   null   test transaction   null   null   null   null   null   null   null   null   null   null   
[INFO] 100003   bee   bee   100   null   new2   null   null   null   null   null   null   null   null   null   null   
[INFO] 100001   Bee   Bee(ORM Framework)   95   2020-03-02 11:29:28   test   12345601   test1   2021-04-08 00:23:33   null   null   null   null   null   null   null   
[INFO] 100002   bee   bee   100   null   new2   null   null   null   null   null   null   null   null   null   null   
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders o right join test_user t on o.name=t.name
[INFO] [Bee]  | <--  select rows: 3
[INFO] null   null   null   null   null   null   null   null   null   578156731817779201   null   null   null   bee-user   testuser   null   
[INFO] null   null   null   null   null   null   null   null   null   578156770472484864   beeUser@163.com   null   Bee   bee   bee   null   
[INFO] null   null   null   null   null   null   null   null   null   800002   honey@163.com   cn   Honey   honey   honey   null   
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders o inner join test_user t on o.name=t.name
[INFO] [Bee]  | <--  select rows: 0
[INFO] (total between 0 and 100) and orders.name='Bee'
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders where exists (select id from orders)
[INFO] [Bee]  | <--  select rows: 5
[INFO] 100002   bee   bee   100   null   new2   null   null   null   
[INFO] 100001   Bee   Bee(ORM Framework)   95   2020-03-02 11:29:28   test   12345601   test1   2021-04-08 00:23:33   
[INFO] 100003   bee   bee   100   null   new2   null   null   null   
[INFO] 578156731817779200   bee   Bee(ORM Framework)   92   null   test transaction   null   null   null   
[INFO] 578156770472484864   bee   Bee(ORM Framework)   92   2021-04-08 00:23:33   null   null   null   null   
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders where not exists (select id from orders)
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders where id in (select id from orders)
[INFO] [Bee]  | <--  select rows: 5
[INFO] 100002   bee   bee   100   null   new2   null   null   null   
[INFO] 100001   Bee   Bee(ORM Framework)   95   2020-03-02 11:29:28   test   12345601   test1   2021-04-08 00:23:33   
[INFO] 100003   bee   bee   100   null   new2   null   null   null   
[INFO] 578156731817779200   bee   Bee(ORM Framework)   92   null   test transaction   null   null   null   
[INFO] 578156770472484864   bee   Bee(ORM Framework)   92   2021-04-08 00:23:33   null   null   null   null   
[INFO] [Bee] PreparedSqlLib select SQL: select * from orders where id not in (select id from orders)
[INFO] [Bee]  | <--  select rows: 0
[INFO] [Bee] PreparedSqlLib select SQL: select count(total),max(total),min(total),avg(total),sum(total) from orders
[INFO] [Bee]  | <--  select rows: 1
[INFO] 5   100   92   95.8   479   
[INFO] ChainSelectExam finished....
[INFO] [bee-exam] ====================ChainSelectExam.test======end.

[INFO] [bee-exam] ====================UnionSelectExam.test======start:
[INFO] select * from ( select * from orders,test_user where orders.name=test_user.name ) where rownum <= 10
[INFO] Getting this sql twice is same!
[INFO] [Bee] PreparedSqlLib select SQL: select * from ( select * from orders,test_user where orders.name=test_user.name ) where rownum <= 10
[ERROR] ORA-00918: 未明确定义列

[INFO] [Bee] PreparedSqlLib select SQL: (select * from orders where userid='client01') union (select * from orders where userid='bee')
[INFO] [Bee]  | <--  select rows: 4
[INFO] 100002   bee   bee   100   null   new2   null   null   null   
[INFO] 100003   bee   bee   100   null   new2   null   null   null   
[INFO] 578156731817779200   bee   Bee(ORM Framework)   92   null   test transaction   null   null   null   
[INFO] 578156770472484864   bee   Bee(ORM Framework)   92   2021-04-08 00:23:33   null   null   null   null   
[INFO] [Bee] PreparedSqlLib select SQL: (select * from orders where userid='client01') union all (select * from orders where userid='bee')
[INFO] [Bee]  | <--  select rows: 4
[INFO] 100002   bee   bee   100   null   new2   null   null   null   
[INFO] 100003   bee   bee   100   null   new2   null   null   null   
[INFO] 578156731817779200   bee   Bee(ORM Framework)   92   null   test transaction   null   null   null   
[INFO] 578156770472484864   bee   Bee(ORM Framework)   92   2021-04-08 00:23:33   null   null   null   null   
[INFO] [bee-exam] ====================UnionSelectExam.test======end.

[INFO] [bee-exam] ====================OrdinaryTest.test======start:
[INFO] null is blank? true
[INFO] [bee-exam] ====================OrdinaryTest.test======end.

[INFO] [Bee] ========= reset the dbName in HoneyConfig is :SQLite
[INFO] [Bee] ========= get the dbName from the Connection is :SQLite
